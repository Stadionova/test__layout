/* не на гридах: */

/* html,
body {
  height: 100%;
}

.page-wrapper {
  min-height: 100%;
}

.header {
  height: 50px;
}

.footer {
  height: 100px;
}

.content {
  display: flex;
}

.column_pos_left,
.column_pos_right {
  width: 20%;
}

.column_pos_center {
  width: 60%;
}

.page-wrapper {
  min-height: 100%;
  margin-bottom: -100px;
}

.footer-buffer {
  height: 100px;
} */

/* на гридах: */

/* html,
body {
  height: 100%;
} */

/* Делается это для того, чтоб можно было Ваш блок .wrapper 
растянуть на всю высоту экрана. Если высота задана в процентах, 
то проценты берутся от высоты родительского 
контейнера(html => body => .wrapper). 
Если явно не задавать высоту родителям .wrapper 
браузер установит высоту этого блока в зависимости 
от высоты его содержимого. И как уже писали раньше 
это необходимо для прижимания футера к низу страницы 
в тех случаях, когда высота контента не позволяет этого сделать */

/* .grid {
  min-height: 100%;
  display: grid;
  grid-template-areas: 'header header header' 'nav main aside' 'footer footer footer';
  grid-template-columns: 1fr 3fr 1fr;
  grid-template-rows: 50px auto 100px;
  grid-column-gap: 10px;
  grid-row-gap: 15px;
} */

/* пишу как и что будет в строках и колонках */
/* grid-template-areas:  */
/* 'h h h' это значит, что я займу две колонки */
/* 'n c'; nav займёт одну колонку, content займёт вторую колонку */
/* говорим сколько строк у нас будет:
 типа одна строка для хэдера,
 вторая строка для всего остального */

/* .grid {
  grid-template-areas: 'header header header' 'nav main aside' 'footer footer footer';
} */

/* колонок тоже будет две: одна для сайдбара слева, 
  вторая для всего остального справа */
/* одна колонка будет занимать 2 фракции,
  вторая = 10 фракциям (равных частей) */
/* grid-template-columns: 2fr 10fr; */
/* grid-gap - это растояние между элементами */
/* grid-gap: 10px; */
/* значение единицы fr позволяет вам легко изменять ширину столбцов */
/* Однако приведенный пример не дает нам адаптивности,
которую мы хотим,
поскольку эта сетка всегда будет иметь ширину в три столбца. Мы хотим,
чтобы наша сетка меняла количество столбцов в зависимости от ширины контейнера. */
/* .grid {
  grid-template-columns: 1fr 3fr 1fr;
} */

/* то есть первая строка высотой 60px, 
  вторая строка равна одной фракции 1fr */

/* .grid {
  grid-template-rows: 50px auto 100px;
} */

/* Свойство grid-column-gap определяет размер ширины линий. Вы можете думать об этом, как о настройке ширины отступов между столбцами. */
/* CSS свойство grid-row-gap определяет расстояние (промежуток) между строками в макете сетки. */

/* .grid {
  grid-column-gap: 10px;
  grid-row-gap: 15px;
} */

/* Мы начнем с функции repeat (). 
Это мощный способ указания столбцов и строк. 
Давайте возьмем исходную сетку и изменим ее 
используя repeat (): */
/* Другими словами, repeat(3, 100px) идентично 100px 100px 100px. 
В первом параметре указано, сколько столбцов или строк вы хотите, 
а второе определяет их ширину, поэтому это даст нам тот же 
самый макет, с которого мы начали: */

/* .grid {
  min-height: 100%;
  display: grid;
  grid-template-areas: 'header header header' 'nav main aside' 'footer footer footer';
  grid-template-columns: 1fr 3fr 1fr;
  grid-template-rows: 50px auto 100px;
  grid-column-gap: 10px;
  grid-row-gap: 15px;
} */

/* .grid {
  display: grid;
  grid-template-columns: repeat(3, 440px);
  grid-template-rows: repeat(2, 288px);
  grid-column-gap: 10px;
  grid-row-gap: 15px; */
/* min-height: 100%; */
/* } */

/* вместо фиксированного количество столбцов,
определим их автоматически,
заменив 3 на auto-fit. */
/* Теперь сетка меняет количество столбцов в зависимости 
от ширины контейнера.
Браузер пытается разместить как можно больше столбцов 
шириной 100 пикселей в контейнере. */
/* Однако,
если мы захардкодим все столбцы ровно на 100 пикселей,
мы никогда не получим необходимую гибкость,
так как они редко будут заполнять всю ширину. Как вы можете видеть на гифке выше,
сетка часто оставляет пустое пространство с правой стороны. */
/* Конечный ингредиент,
который нам нужен,
чтобы исправить это,
называется minmax (). Мы просто заменим 100px на minmax (100px, 1fr). */
/* .grid {
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, 440px);
  grid-template-rows: repeat(2, 288px); */
/* grid-column-gap: 10px; */
/* grid-row-gap: 15px;  */
/* } */

.grid {
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(440px, 1fr));
  grid-template-rows: repeat(2, 288px);
}

.grid > div > img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.header {
  background-color: green;
}

.main {
  background-color: rgb(42, 68, 42);
}

.nav {
  background-color: rgb(154, 211, 154);
}

.aside {
  background-color: rgb(115, 255, 115);
}

.aside_2 {
  background-color: rgb(162, 189, 162);
}

.footer {
  background-color: rgb(211, 136, 136);
}

/* float layout */

/* как внутри общего блока div: float-test
расположить блок div:rightFromTagP справа от блока p */

.float-test {
  border: 1px solid;
  background-color: rgb(43, 99, 80);
  width: 200px;
  height: 50px;
  margin: 0px;
  margin-top: 50px;
}

.float-test p {
  color: aliceblue;
  width: 100px;
  padding: 0px;
  margin: 0px;
  float: left;
}

.rightFromTagP {
  float: right;
  border: 1px solid;
  background-color: rgb(159, 236, 211);
  width: 50px;
  height: 50px;
}

/* float test part */

.wrapper-winni {
  background-color: aquamarine;
  border: 1px solid;
  width: 600px;
  height: 700px;
}

.block-winni {
  margin-bottom: 120px;
}

.block-text-1 {
  float: left;
  width: 500px;
}

.block-text-1 img {
  float: right;
}

.block-text-2 {
  float: left;
  width: 500px;
}

.block-text-2 img {
  float: left;
}

.block-text-3 {
  float: right;
  width: 500px;
}

.block-text-3 img {
  float: right;
}

img {
  width: 100px;
  height: 100px;
}

img.right {
  float: right;
  margin: 5px 0 5px 10px;
}

img.left {
  float: left;
  margin: 5px 10px 5px 0;
}

.winni-puh {
  width: 500px;
}

.winni-puh img {
  border: 1px solid black;
}